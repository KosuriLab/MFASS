"""
@author Kimberly Insigne
kiminsigne@gmail.com
February 3, 2017

This script takes as input a file of filenames, a list of txt files containing
"alignments" generated by the script perfect_alignment.py. These alignment files
are simple tab-separated text files, where the first column is the sequence ID
the read mapped to and the second column is the sequence. Each alignment file
corresponds to a different sample. This script aggregates all of the information
into one output file, where each row is a different sequence ID and each column
is the count of that sequence in that sample. It also adds the sequence
information for each sequence.

"""

import argparse
import pandas as pd
import os
from collections import Counter
from helpful_utils import fasta_reader

if __name__ == '__main__':

	parser = argparse.ArgumentParser()
	parser.add_argument('filenames', 
		help='.txt file of filenames of alignments to aggregate')
	parser.add_argument('output', help='name of output file')

	args = parser.parse_args()

	alignments = pd.DataFrame()

	with open(args.filenames) as filenames:
		for filename in filenames:
			filename = filename.strip()
			with open(filename) as alignment:
				# id is first column, sequence is second column,
				# remove leading '>'
				ids = [line.split('\t')[0].replace('>', '') for line in alignment]
				# count occurrences of ids, convert to data frame. IDs will be index,
				# counts will be first column
				sample_counts = pd.DataFrame.from_dict(dict(Counter(ids)), orient='index')
				# rename count column to indicate sample
				# get basename of filename path, take sample name which is the first
				# field of a '_' delimited string
				sample_counts.columns = [os.path.basename(filename).split('_')[0]]
				alignments = alignments.join(sample_counts, how='outer', sort=True)

	# fill in NaN's with 0
	alignments.fillna(0, inplace=True)	

	# write csv
	alignments.to_csv(args.output, index_label='id')
